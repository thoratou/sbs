##
##main macro
##
#macro( writeAll $steps )
    #header()
    #foreach( $step in $steps )
        #set( $kind = $step.getStepKind() )
        #set( $start = $step.getStartKind() )
        #if($kind == $kindmap.start)
            #if($start == $startmap.relative)
                #write( $step.getChildSteps(), "rootElement" )
            #else
                //Unsupported absolute start type
            #end
        #else
            //Unknown start type
        #end
    #end
    #footer()
#end
#macro( header )
package ${package};

public class ${simpleclass}XmlReader{
    @SuppressWarnings("unchecked")
    public void read(${class} bom, org.jdom.Element rootElement)
    {
#end
#macro( footer )
    }
}
#end
#set( $fieldPackage = "com.thoratou.exact.fields" )
##
##main recursion
##
#macro( write $steps , $parentElement )
    #foreach( $step in $steps )
        #set( $kind = $step.getStepKind() )
        #set( $value = $step.getStepValue() )
        #set( $method = $step.getMethodName() )
        #set( $return = $step.getReturnType() )
        #if($kind == $kindmap.child)
            #set( $childList = $processingutil.generateNewChildListName() )
            #set( $element = $processingutil.generateNewElementName() )
            java.util.List<org.jdom.Element> $childList = $parentElement .getChildren("$value");
            for(org.jdom.Element $element : $childList)
            {
                #write( $step.getChildSteps(), $element )
            }
        #elseif($kind == $kindmap.text)
            #set( $text = $processingutil.generateNewTextName() )
            String $text = $parentElement .getTextTrim();
            bom.${method}().set($text);
        #elseif($kind == $kindmap.attribute)
            #set( $attr = $processingutil.generateNewAttributeName() )
            String $attr = $parentElement .getAttributeValue("$value");
            bom.${method}().set($attr);
        #end
    #end
#end
##
##main call
##
$indentutil.javaCode("#writeAll($steps)")
